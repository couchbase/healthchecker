#!/usr/bin/python
# -*- coding: utf-8 -*-

import getopt
import sys
import os
import traceback
import copy
import logging
import time

import collector
import analyzer
import stats_buffer
import util_cli as util

import node_map

log = logging.getLogger('cbhealthchecker')
log.setLevel(logging.INFO)
log.addHandler(logging.StreamHandler())

def parse_opt():
    time_file_name = time.strftime('%Y-%m-%d_%H-%M-%S')
    (bucket, cluster, user, password, txtfile, htmlfile, statsfile, verbose, debug,
     inputfile, scale, statsonly) = ('all', '', '', '', time_file_name + '.txt',
     time_file_name + '.html', time_file_name + '.json', False, False, '', 'day', False)

    try:
        (opts, _args) = getopt.getopt(sys.argv[1:], 
                                      'b:c:dh?vp:u:o:i:s:j', [
                'bucket=',
                'cluster=',
                'debug',
                'help',
                'verbose',
                'password=',
                'user=',
                'html=',
                'input=',
                'scale=',
                'json',
                ])
    except getopt.GetoptError, err:
        usage(err)

    for (opt, arg) in opts:
        if opt in ('-h', '-?', '--help'):
            usage()
            sys.exit(0)
        if opt in ('-b', '--bucket'):
            bucket = arg
        if opt in ('-c', '--cluster'):
            cluster = arg
        if opt in ('-u', '--user'):
            user = arg
        if opt in ('-p', '--password'):
            password = arg
        if opt in ('-d', '--debug'):
            debug = True
            #log.setLevel(logging.DEBUG)
        if opt in ('-o', '--output'):
            htmlfile = arg
        if opt in ('-v', '--verbose'):
            verbose = True
        if opt in ('-i', '--input'):
            inputfile = arg
        if opt in ('-s', '--scale'):
            if arg not in ('minute', 'hour', 'day', 'week', 'month', 'year'):
                print "ERROR: Wrong scale unit:" + arg
                usage()
                exit(1)
            else:
                scale = arg
        if opt in ('-j', '--json'):
            statsonly = True

    if not cluster and not inputfile: 
        usage()
    return (bucket, cluster, user, password, txtfile, htmlfile, statsfile, verbose, debug, inputfile, scale, statsonly, opts)

def usage(error_msg=''):
    if error_msg:
        print "ERROR: %s" % error_msg
        sys.exit(2)

    print """cbhealthchecker - cluster key performance indicator stats

usage: cbhealthchecker CLUSTER USERNAME PASSWORD OPTIONS

CLUSTER:
  --cluster=HOST[:PORT] or -c HOST[:PORT] Default port is 8091
USERNAME:

  -u USERNAME, --user=USERNAME       admin username of the cluster
PASSWORD:
  -p PASSWORD, --password=PASSWORD   admin password of the cluster
OPTIONS:
  -b BUCKETNAME, --bucket=BUCKETNAME Specific bucket name. Default is all buckets
  -i FILENAME, --input=FILENAME      Construct report out of input JSON file
  -o FILENAME, --output=FILENAME     Default output filename is 'health_report.html'
  -d --debug                         Show diagnosis information
  -h --help                          Show this help message and exit
  -v --verbose                       Display detailed node level information
  -s SCALE, --scale=SCALE            Specify stats scale, i.e. minute, hour, day, week, month and year
                                     Default scale is 'day'
  -j --jsononly                      Colllect data only but no analysis report generated
"""
    sys.exit(2)

def main():
    (bucket, cluster, user, password, txtfile, htmlfile, statsfile, verbose, debug, inputfile, scale, statsonly, opts) = parse_opt()

    #make snapshot for the current cluster status
    retriever = collector.StatsCollector(log)
    scale = retriever.collect_data(bucket, cluster, user, password, inputfile, statsfile, scale, opts)
    if statsonly:
        sys.stderr.write("\nThe run finished successfully. Please find collected stats at 'reports/{0}'.\n".format(statsfile))
        sys.exit(0)
    else:
        #analyze the snapshot and historic data
        performer = analyzer.StatsAnalyzer(log)
        performer.run_analysis(scale)
        performer.run_report(txtfile, htmlfile, verbose, scale, debug)
        sys.stderr.write("\nThe run finished successfully. Please find html output at 'reports/{0}' and text output at 'reports/{1}'.\n".format(htmlfile, txtfile))
if __name__ == '__main__':
    main()
